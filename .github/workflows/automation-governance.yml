name: automation-governance

on:
  pull_request:
  push:
    branches: [main]

jobs:
  governance:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Docs integrity check
        run: python scripts/docs_integrity.py --check

      - name: Compute instruction hash
        id: inst
        run: |
          hash=$(python scripts/instruction_hash_guard.py --print)
          echo "instruction_hash=$hash" >> $GITHUB_OUTPUT
          echo "Canonical Instruction Hash: $hash" >> $GITHUB_STEP_SUMMARY

      - name: Generate SBOM
        run: |
          python scripts/sbom_generate.py
          echo "SBOM generated" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: License check (non-strict)
        run: python scripts/license_check.py
        continue-on-error: true

      - name: Upload governance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: governance-artifacts
          path: |
            build/sbom.cdx.json
            tool/license_cache.json
          if-no-files-found: ignore

      - name: PR Comment (hash)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- instruction-hash -->';
            const hash = process.env.INSTRUCTION_HASH || `${{ steps.inst.outputs.instruction_hash }}`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number, per_page: 100});
            for (const c of comments) {
              if (c.user.type === 'Bot' && c.body && c.body.includes(marker)) {
                await github.rest.issues.deleteComment({owner, repo, comment_id: c.id});
              }
            }
            const body = `${marker}\nCanonical Instruction Hash: \`${{ steps.inst.outputs.instruction_hash }}\``;
            await github.rest.issues.createComment({owner, repo, issue_number, body});
