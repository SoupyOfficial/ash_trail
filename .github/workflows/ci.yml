name: flutter-ci
on:
  pull_request:
  push:
    branches: [ main ]
env:
  COVERAGE_MIN: '70'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
            restore-keys: ${{ runner.os }}-pip-
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pyyaml requests jsonschema; fi
      - name: Validate feature_matrix schema
        run: |
          if [ -f feature_matrix.yaml ]; then \
            python -c "import json,yaml,jsonschema,pathlib;d=yaml.safe_load(pathlib.Path('feature_matrix.yaml').read_text(encoding='utf-8'));s=json.loads(pathlib.Path('tool/json_schema/feature_matrix.schema.json').read_text(encoding='utf-8'));jsonschema.validate(d,s);print('Schema validation OK')"; \
          else echo 'No feature_matrix.yaml present'; fi
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          # Pin Flutter to stabilize dependency resolution (Dart >=3.5 for flutter_lints 5.x)
          flutter-version: '3.24.0'
      - name: Cache Flutter pub
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      - run: flutter pub get
      - name: Run generator
        run: |
          if [ -f scripts/generate_from_feature_matrix.py ]; then python scripts/generate_from_feature_matrix.py; fi
      - name: Run build_runner
        run: |
          if grep -q 'freezed_annotation' pubspec.yaml; then flutter pub run build_runner build --delete-conflicting-outputs; fi
      - name: Python generator unit tests
        run: |
          if [ -d scripts/tests ]; then python -m unittest discover -s scripts/tests -p '*_test.py'; fi
      - name: Check generator drift
        run: |
          git add .
          if ! git diff --cached --quiet; then
            echo 'ERROR: Generated artifacts drift detected. Commit updates.'
            echo 'Changed files:'
            git diff --cached --name-only | sed -n '1,50p'
            echo '--- Unified diff (truncated) ---'
            # Show diff for first 5 files to help debugging in PR without massive log spam
            for f in $(git diff --cached --name-only | head -n 5); do
              echo "::: Diff for $f";
              git diff --cached --unified=3 -- $f | sed -n '1,200p';
              echo "::: End diff for $f";
            done
            exit 1
          fi
      - run: flutter analyze
      - run: flutter test --coverage
      - name: Enforce minimum coverage
        run: |
          if [ ! -f coverage/lcov.info ]; then echo 'Missing lcov.info'; exit 1; fi
          hits=$(grep -h '^DA:' coverage/lcov.info | awk -F',' 'BEGIN{c=0} /,1$/ {c++} END{print c}')
          total=$(grep -h '^DA:' coverage/lcov.info | wc -l | awk '{print $1}')
          if [ "$total" -eq 0 ]; then echo 'No lines found in coverage'; exit 1; fi
          pct=$(awk -v h="$hits" -v t="$total" 'BEGIN { printf("%.2f", (h/t)*100) }')
          echo "coverage_pct=$pct" >> $GITHUB_ENV
          echo "Coverage: $pct% (hits=$hits total=$total)"
          threshold=${COVERAGE_MIN}
          awk -v p="$pct" -v th="$threshold" 'BEGIN { exit (p+0>=th)?0:1 }' || { echo "Coverage below ${threshold}%"; exit 1; }
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- coverage-report -->';
            const pct = process.env.coverage_pct || 'n/a';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number, per_page: 100});
            for (const c of comments) {
              if (c.user.type === 'Bot' && c.body && c.body.includes(marker)) {
                await github.rest.issues.deleteComment({owner, repo, comment_id: c.id});
              }
            }
            const body = `${marker}\n**Coverage:** ${pct}% (min ${process.env.COVERAGE_MIN}%)`;
            await github.rest.issues.createComment({owner, repo, issue_number, body});
      - uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
