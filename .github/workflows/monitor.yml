name: Automation Monitor

on:
  schedule:
    # Daily at 03:17 UTC
    - cron: '17 3 * * *'
  workflow_dispatch: {}

permissions:
  issues: write

jobs:
  run-monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Run automation monitor (JSON)
        run: |
          python scripts/automation_monitor.py check --json > monitor_result.json || true
        working-directory: ${{ github.workspace }}

      - name: Upload monitor result artifact
        uses: actions/upload-artifact@v4
        with:
          name: automation-monitor-result
          path: monitor_result.json

      - name: Create GitHub issue on critical failures
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          python - <<'PY'
          import json, os, sys
          from pathlib import Path
          import requests

          p = Path('monitor_result.json')
          if not p.exists():
              print('No monitor_result.json found, skipping issue creation')
              sys.exit(0)

          data = json.loads(p.read_text(encoding='utf-8'))

          # Detect critical issues:
          issues = data.get('issues', []) or []
          exec_record = data.get('execution_record') or data.get('execution', {})

          critical_count = 0
          # Prefer explicit field if available
          if isinstance(exec_record, dict) and 'critical_issues' in exec_record:
              try:
                  critical_count = int(exec_record.get('critical_issues', 0) or 0)
              except Exception:
                  critical_count = 0

          # Also count any issues beginning with 'ERROR'
          critical_count += sum(1 for i in issues if isinstance(i, str) and i.startswith('ERROR'))

          if critical_count <= 0:
              print('No critical issues detected')
              sys.exit(0)

          # Compose issue body
          title = '[Automation Monitor] Critical issues detected'
          body_lines = []
          body_lines.append(f'**Critical issues:** {critical_count}')
          body_lines.append('')
          body_lines.append('> Monitor output (truncated)')
          body_lines.append('')
          # Include first 3000 chars of JSON for context
          json_snippet = json.dumps(data, indent=2)[:3000]
          body_lines.append('```json')
          body_lines.append(json_snippet)
          body_lines.append('```')
          body_lines.append('')
          body_lines.append('Automated detection from `scripts/automation_monitor.py`.')
          body = '\n'.join(body_lines)

          # Create issue via API
          repo = os.environ.get('REPO')
          token = os.environ.get('GITHUB_TOKEN')
          if not repo or not token:
              print('Missing REPO or GITHUB_TOKEN, cannot create issue')
              sys.exit(0)

          url = f'https://api.github.com/repos/{repo}/issues'
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github+json'
          }
          payload = {'title': title, 'body': body, 'labels': ['automation-monitor']}

          resp = requests.post(url, headers=headers, json=payload, timeout=15)
          if resp.status_code in (200, 201):
              print('Created issue:', resp.json().get('html_url'))
          else:
              print('Failed to create issue', resp.status_code, resp.text)
              sys.exit(1)
          PY
